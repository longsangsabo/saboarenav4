-- =====================================================
-- RESET ALL USER RANKS FOR TESTING
-- Script ƒë·ªÉ reset rank c·ªßa t·∫•t c·∫£ users v·ªÅ rank m·∫∑c ƒë·ªãnh
-- =====================================================

-- 1. BACKUP D·ªÆ LI·ªÜU HI·ªÜN T·∫†I (ƒë·ªÉ an to√†n)
DROP TABLE IF EXISTS users_rank_reset_backup;
CREATE TABLE users_rank_reset_backup AS 
SELECT id, rank, elo_rating, total_wins, total_losses, created_at, updated_at
FROM users 
WHERE rank IS NOT NULL;

-- 2. RESET T·∫§T C·∫¢ USER RANKS V·ªÄ RANK M·∫∂C ƒê·ªäNH
UPDATE users 
SET 
    rank = 'K',                    -- Rank m·∫∑c ƒë·ªãnh: Ng∆∞·ªùi m·ªõi
    elo_rating = 1000,             -- ELO m·∫∑c ƒë·ªãnh cho rank K
    total_wins = 0,                -- Reset wins v·ªÅ 0
    total_losses = 0,              -- Reset losses v·ªÅ 0
    updated_at = NOW()             -- Update timestamp
WHERE id IS NOT NULL;

-- 3. RESET C√ÅC B·∫¢NG LI√äN QUAN (n·∫øu t·ªìn t·∫°i)

-- Reset rank_requests table
DO $$
BEGIN
    IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'rank_requests') THEN
        DELETE FROM rank_requests;
        RAISE NOTICE 'ƒê√£ x√≥a t·∫•t c·∫£ rank requests';
    ELSE
        RAISE NOTICE 'B·∫£ng rank_requests kh√¥ng t·ªìn t·∫°i';
    END IF;
END $$;

-- Reset tournament_participants (n·∫øu c√≥ rank data)
DO $$
BEGIN
    IF EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'tournament_participants' AND column_name = 'current_rank'
    ) THEN
        UPDATE tournament_participants 
        SET current_rank = 'K'
        WHERE current_rank IS NOT NULL;
        RAISE NOTICE 'ƒê√£ reset rank trong tournament_participants';
    ELSE
        RAISE NOTICE 'C·ªôt current_rank kh√¥ng t·ªìn t·∫°i trong tournament_participants';
    END IF;
END $$;

-- Reset notifications li√™n quan ƒë·∫øn rank
UPDATE notifications 
SET data = jsonb_set(
    jsonb_set(
        data,
        '{current_rank}',
        '"K"'::jsonb
    ),
    '{requested_rank}',
    '"K"'::jsonb
)
WHERE type LIKE '%rank%' 
AND (data ? 'current_rank' OR data ? 'requested_rank');

-- 4. C·∫¨P NH·∫¨T TIMESTAMPS
UPDATE users 
SET updated_at = NOW() 
WHERE rank = 'K';

-- 5. VALIDATION - Ki·ªÉm tra k·∫øt qu·∫£ reset
CREATE OR REPLACE FUNCTION validate_rank_reset()
RETURNS TABLE (
    status TEXT,
    total_users INTEGER,
    users_with_rank_k INTEGER,
    users_with_elo_1000 INTEGER,
    users_with_zero_wins INTEGER,
    backup_count INTEGER
)
LANGUAGE plpgsql
AS $$
DECLARE
    v_total_users INTEGER;
    v_users_k INTEGER;
    v_users_elo INTEGER;
    v_users_wins INTEGER;
    v_backup_count INTEGER;
BEGIN
    -- Count totals
    SELECT COUNT(*) INTO v_total_users FROM users;
    
    SELECT COUNT(*) INTO v_users_k 
    FROM users 
    WHERE rank = 'K';
    
    SELECT COUNT(*) INTO v_users_elo 
    FROM users 
    WHERE elo_rating = 1000;
    
    SELECT COUNT(*) INTO v_users_wins 
    FROM users 
    WHERE total_wins = 0 AND total_losses = 0;
    
    SELECT COUNT(*) INTO v_backup_count 
    FROM users_rank_reset_backup;
    
    RETURN QUERY SELECT 
        'RESET_SUCCESS'::TEXT,
        v_total_users,
        v_users_k,
        v_users_elo,
        v_users_wins,
        v_backup_count;
END;
$$;

-- 6. CH·∫†Y VALIDATION
SELECT * FROM validate_rank_reset();

-- 7. HI·ªÇN th·ªã TH·ªêNG K√ä SAU RESET
SELECT 
    'TH·ªêNG K√ä SAU KHI RESET' as title,
    COUNT(*) as total_users,
    COUNT(CASE WHEN rank = 'K' THEN 1 END) as users_rank_k,
    COUNT(CASE WHEN elo_rating = 1000 THEN 1 END) as users_elo_1000,
    COUNT(CASE WHEN total_wins = 0 THEN 1 END) as users_zero_wins,
    COUNT(CASE WHEN total_losses = 0 THEN 1 END) as users_zero_losses
FROM users;

-- 8. HI·ªÇN TH·ªä M·∫™U V√ÄI USER SAU RESET
SELECT 
    id,
    email,
    username,
    rank,
    elo_rating,
    total_wins,
    total_losses,
    updated_at
FROM users 
ORDER BY updated_at DESC 
LIMIT 5;

-- 9. CLEAN UP VALIDATION FUNCTION
DROP FUNCTION IF EXISTS validate_rank_reset();

-- =====================================================
-- RANK RESET COMPLETED!
-- =====================================================
-- 
-- ƒê√£ th·ª±c hi·ªán:
-- ‚úÖ Backup d·ªØ li·ªáu c≈© v√†o b·∫£ng users_rank_reset_backup
-- ‚úÖ Reset t·∫•t c·∫£ users v·ªÅ rank 'K' (Ng∆∞·ªùi m·ªõi)
-- ‚úÖ Reset ELO v·ªÅ 1000 (ELO m·∫∑c ƒë·ªãnh cho rank K)
-- ‚úÖ Reset total_wins v√† total_losses v·ªÅ 0
-- ‚úÖ X√≥a t·∫•t c·∫£ rank_requests
-- ‚úÖ Reset rank data trong c√°c b·∫£ng li√™n quan
-- ‚úÖ C·∫≠p nh·∫≠t timestamps
-- ‚úÖ Validation v√† reporting
--
-- L∆ØU √ù CHO TESTING:
-- üéØ T·∫•t c·∫£ users gi·ªù s·∫Ω b·∫Øt ƒë·∫ßu v·ªõi rank "K" (Ng∆∞·ªùi m·ªõi)
-- üéØ App s·∫Ω hi·ªÉn th·ªã "Ng∆∞·ªùi m·ªõi" cho t·∫•t c·∫£ users
-- üéØ ELO b·∫Øt ƒë·∫ßu t·ª´ 1000 - ph√π h·ª£p v·ªõi Vietnamese ranking system
-- üéØ Users c√≥ th·ªÉ request rank m·ªõi th√¥ng qua rank registration
-- üéØ C√≥ th·ªÉ restore data t·ª´ b·∫£ng users_rank_reset_backup n·∫øu c·∫ßn
-- =====================================================